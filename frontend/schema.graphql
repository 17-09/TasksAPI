"""
The purpose of the `cost` directive is to define a `weight` for GraphQL types,
fields, and arguments. Static analysis can use these weights when calculating
the overall cost of a query or response.
"""
directive @cost(
  """
  The `weight` argument defines what value to add to the overall cost for every
  appearance, or possible appearance, of a type, field, argument, etc.
  """
  weight: String!
) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"""
The `@specifiedBy` directive is used within the type system definition language
to provide a URL for specifying the behavior of custom scalar definitions.
"""
directive @specifiedBy(
  """
  The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types.
  """
  url: String!
) on SCALAR

type Mutation {
  createTask(title: String!, description: String): TaskEntity!
  updateTaskStatus(id: UUID!, status: TaskStatus!): TaskEntity!
}

type Query {
  allTasks: [TaskEntity!]!
}

type Subscription {
  taskCreated: TaskEntity!
  taskUpdated: TaskEntity!
}

type TaskEntity {
  id: UUID!
  title: String!
  description: String
  status: TaskStatus!
}

enum TaskStatus {
  PENDING
  COMPLETED
}

scalar UUID

